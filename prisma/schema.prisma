// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Se usar credenciais
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  userProgress  UserProgress[]
  userAchievements UserAchievement[]
  enrollments   Enrollment[]
}

enum UserRole {
  USER
  ADMIN
  TUTOR // Para quem cria conteúdo
}

// Para NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
// Fim NextAuth.js

// Nova estrutura hierárquica
model Formation {
  id          String   @id @default(cuid())
  title       String   @unique
  slug        String   @unique
  description String?
  duration    String?  // Ex: "6 meses", "1 ano"
  level       Level    @default(BEGINNER)
  price       Decimal? // Preço da formação
  imageUrl    String?
  order       Int?     @unique
  isActive    Boolean  @default(true)
  modules     Module[]
  enrollments Enrollment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Module {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  order       Int      // Ordem dentro da formação
  formationId String
  formation   Formation @relation(fields: [formationId], references: [id])
  subjects    Subject[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([formationId, order])
}

model Subject {
  id          String   @id @default(cuid())
  title       String   // Ex: "Direito Civil", "Direito Constitucional"
  slug        String   @unique
  description String?
  color       String?  // Cor para identificação visual
  iconUrl     String?  // Ícone da matéria
  order       Int      // Ordem dentro do módulo
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id])
  pills       Pill[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([moduleId, order])
}

model Pill {
  id          String   @id @default(cuid())
  title       String   // Ex: "Art. 1º do Código Civil", "Princípio do pacta sunt servanda"
  slug        String   @unique
  content     Json     // Conteúdo rico: lei, doutrina, infográficos
  videoUrl    String?
  estimatedTime Int?   // Tempo estimado em minutos
  difficulty  Level    @default(BEGINNER)
  tags        String[] // Tags para interconexão
  order       Int      // Ordem dentro da matéria
  subjectId   String
  subject     Subject  @relation(fields: [subjectId], references: [id])
  
  // Relacionamentos para interconexão
  prerequisites Pill[] @relation("PillPrerequisites")
  dependents    Pill[] @relation("PillPrerequisites")
  relatedPills  Pill[] @relation("RelatedPills")
  relatedTo     Pill[] @relation("RelatedPills")
  
  quizzes      Quiz[]
  userProgress UserProgress[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([subjectId, order])
}

model Quiz {
  id          String    @id @default(cuid())
  pillId      String
  pill        Pill      @relation(fields: [pillId], references: [id])
  questions   Question[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Question {
  id        String   @id @default(cuid())
  text      String
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  options   Json     // Ex: [{text: "Opção A", isCorrect: true}, {text: "Opção B", isCorrect: false}]
  type      QuestionType @default(MULTIPLE_CHOICE)
  explanation String? // Explicação para a resposta correta
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  formationId String
  formation   Formation @relation(fields: [formationId], references: [id])
  enrolledAt  DateTime @default(now())
  completedAt DateTime?
  progress    Float    @default(0) // Percentual de conclusão

  @@unique([userId, formationId])
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  pillId      String
  pill        Pill     @relation(fields: [pillId], references: [id])
  completedAt DateTime @default(now())
  score       Int?     // Pontuação no quiz associado à pílula
  timeSpent   Int?     // Tempo gasto em minutos
  streakCount Int      @default(0)

  @@unique([userId, pillId])
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  iconUrl     String?
  criteria    Json     // Critérios para desbloqueio
  userAchievements UserAchievement[]
  createdAt   DateTime @default(now())
}

model UserAchievement {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  awardedAt     DateTime   @default(now())

  @@unique([userId, achievementId])
}